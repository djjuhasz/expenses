// Code generated by goa v3.14.1, DO NOT EDIT.
//
// transactions endpoints
//
// Command:
// $ goa gen djjuhasz/expenses/api/design --output api

package transactions

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "transactions" service endpoints.
type Endpoints struct {
	Transactions goa.Endpoint
}

// NewEndpoints wraps the methods of the "transactions" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Transactions: NewTransactionsEndpoint(s),
	}
}

// Use applies the given middleware to all the "transactions" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Transactions = m(e.Transactions)
}

// NewTransactionsEndpoint returns an endpoint function that calls the method
// "transactions" of service "transactions".
func NewTransactionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Transactions(ctx)
	}
}
